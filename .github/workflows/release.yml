name: Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  release:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        id: create_release

      - id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

  build:
    strategy:
      matrix:
        target:
          - os: 'macos-latest'
            goos: 'darwin'
            goarch: 'amd64'
          - os: 'macos-latest'
            goos: 'darwin'
            goarch: 'arm64'
          - os: 'ubuntu-latest'
            goos: 'linux'
            goarch: 'amd64'
          - os: 'windows-latest'
            goos: 'windows'
            goarch: 'amd64'
            ext: '.exe'
        go: [ '1.16' ]

    runs-on: ${{ matrix.target.os }}

    needs: [ release ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go }}

      # xcode required until github macos runner is 11.x based
      - uses: maxim-lobanov/setup-xcode@v1
        if: matrix.target.goos == 'darwin' && matrix.target.goarch == 'arm64'
        with:
          xcode-version: latest

      - if: matrix.target.goos == 'darwin' && matrix.target.goarch == 'arm64'
        run: |
          echo SDKROOT=$(xcrun --sdk macosx --show-sdk-path) >> $GITHUB_ENV

      - run: |
          tag=$(git describe --tags | grep '^v' | head -1) 
          semver=${tag#v}
          version=${semver%-*-*}
          go build -v -o ${{ matrix.target.goos }}-${{ matrix.target.goarch }} -ldflags="-X 'main.BuildTime=$(date)' -X 'main.BuildVersion=$version'" .
        env:
          GOOS: ${{ matrix.target.goos }}
          GOARCH: ${{ matrix.target.goarch }}
          CGO_ENABLED: 1

      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url}} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ matrix.target.goos }}-${{ matrix.target.goarch }}
          asset_name: alpaca_${{ needs.release.outputs.version }}_${{ matrix.target.goos }}-${{ matrix.target.goarch }}${{ matrix.target.ext }}
          asset_content_type: application/zip
